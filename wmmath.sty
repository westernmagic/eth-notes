\NeedsTeXFormat{LaTeX2e}
\RequirePackage{expl3}
\RequirePackage{wmpatch}
\ProvidesExplPackage{wmmath}{2016/03/31}{}{}

\RequirePackage{xifthen}
\RequirePackage{ifxetex}
\RequirePackage{ifluatex}
\RequirePackage{makecmds}
\RequirePackage{wml3}

\RequirePackage[fleqn,sumlimits,intlimits,namelimits]{amsmath}

\RequirePackage{cancel}
\RequirePackage{delarray}
\RequirePackage{gauss}
\RequirePackage{maybemath}
%\RequirePackage{breqn} % breaks chemfig
\RequirePackage{mathtools}
\RequirePackage{permute}
\RequirePackage{mleftright}

%\RequirePackage{nath} % breaks things
\sys_if_feature_utf:TF {
	\RequirePackage[math-style = ISO , bold-style = ISO , vargreek-shape = unicode]{unicode-math}
	\setmathfont{XITS Math}
	
	\NewDocumentCommand \lightning {} { \downzigzagarrow }
	\NewDocumentCommand \ulsh      {} { \Lsh }
	\NewDocumentCommand \ursh      {} { \Rsh }
	\NewDocumentCommand \dlsh      {} { \Ldsh }
	\NewDocumentCommand \drsh      {} { \Rdsh }

	% \newcommand*\lightning{\downzigzagarrow}
	% \newcommand*\ulsh{\Lsh}
	% \newcommand*\ursh{\Rsh}
	% \newcommand*\dlsh{\Ldsh}
	% \newcommand*\drsh{\Rdsh}
} {
	\RequirePackage{amssymb}
	\RequirePackage{amsfonts}
	\RequirePackage[mathb]{mathabx}
	\RequirePackage[nointegrals]{wasysym}
	\RequirePackage{trfsigns}
	\RequirePackage{esint}
	
	\changenotsign
	\let\oldepsilon\epsilon
	\renewcommand*{\epsilon}{\ensuremath{\varepsilon}}
	\let\oldphi\phi
	\renewcommand*{\phi}{\ensuremath{\varphi}}
	\let\oldemptyset\emptyset
	\renewcommand*{\emptyset}{\ensuremath{\varnothing}}

	\newcommand*\increment{\Delta}
	\newcommand*\qed{\blacksquare}
}

\RequirePackage{physics}
\RequirePackage{siunitx}

\sisetup{
	detect-all ,
	mode                  = text ,
	locale                = DE ,
	power-font            = unit ,
	output-decimal-marker = . ,
	copy-decimal-marker ,
	sticky-per ,
	per-mode              = fraction ,
	quotient-mode         = fraction ,
	literal-superscript-as-power ,
	binary-units ,
	complex-root-position = after-number ,
	exponent-product      = \cdot ,
	inter-unit-product    = {}\cdot{} ,
	group-digits          = integer ,
	group-minimum-digits  = 4 ,
	group-separator       = ' ,
	input-complex-roots   = \imath ,
	output-complex-root   = \imath ,
	copy-complex-root ,
	range-units           = single ,
	range-phrase          = \textendash
}
\DeclareSIUnit\poise{P}
\DeclareSIUnit\dioptre{dpt}
\DeclareSIUnit\svedberg{S}
%\DeclareSIUnit\mmH2O{mmH2O}


\let\oldimplies\implies
\def\implies{\ensuremath{\oldimplies}{ }}

% unicode-math sets \rightarrow in a \AtBeginDocument, so we have to as well
\AtBeginDocument{
	\let\oldrightarrow\rightarrow
	\def\rightarrow{\oldrightarrow{}~}
}

%refactor
\let\oldoverbrace\overbrace
\let\oldunderbrace\underbrace

\ExplSyntaxOff % due to using _ ; fix?
\DeclareDocumentCommand{\underbrace}{ s g t_ +g }{
	\IfNoValueTF{#2}{
		\oldunderbrace
	}{
		\IfBooleanTF{#3}{
			\IfNoValueTF{#4}{}{
				\IfBooleanTF{#1}{
					\smash{\oldunderbrace{#2}_{#4}}
					\vphantom{#2}
					\gappto{\bracevspacing}{\vphantom{\oldunderbrace{#2}_{#4}}}
				}{
					\smash{\oldunderbrace{#2}_{\mathclap{\substack{#4}}}}
					\vphantom{#2}
					\gappto{\bracevspacing}{\vphantom{\oldunderbrace{#2}_{\mathclap{\substack{#4}}}}}
				}
			}
		}{
			\smash{\oldunderbrace{#2}}
			\vphantom{#2}
			\gappto{\bracevspacing}{\vphantom{\oldunderbrace{#2}}}
		}
	}
}
\DeclareDocumentCommand{\overbrace}{ s g t^ +g }{
	\IfNoValueTF{#2}{
		\oldoverbrace
	}{
		\IfBooleanTF{#3}{
			\IfNoValueTF{#4}{}{
				\IfBooleanTF{#1}{
					\smash{\oldoverbrace{#2}^{#4}}
					\vphantom{#2}
					\gappto{\bracevspacing}{\vphantom{\oldoverbrace{#2}^{#4}}}
				}{
					\smash{\oldoverbrace{#2}^{\mathclap{\substack{#4}}}}
					\vphantom{#2}
					\gappto{\bracevspacing}{\vphantom{\oldoverbrace{#2}^{\mathclap{\substack{#4}}}}}
				}
			}
		}{
			\smash{\oldoverbrace{#2}}
			\vphantom{#2}
			\gappto{\bracevspacing}{\vphantom{\oldoverbrace{#2}}}
		}
	}
}
\ExplSyntaxOn

\let\cR\R
\let\cS\S
\let\cE\Ent
\let\cZ\Zus

\newcommand{\gdw}{g.d., w. }
\makecommand{\R}{\ensuremath{\mathbb{R}}}
\newcommand{\Q}{\ensuremath{\mathbb{Q}}}
\newcommand{\N}{\ensuremath{\mathbb{N}}}
\makecommand{\Z}{\ensuremath{\mathbb{Z}}}
\makecommand{\C}{\ensuremath{\mathbb{C}}}
\newcommand{\I}{\ensuremath{\mathbb{I}}}
\makecommand{\L}{\ensuremath{\mathcal{L}}}

%\newcommand*{\abs}[1]{\left\lvert #1 \right\rvert}
%\newcommand*{\norm}[1]{\left\lVert #1 \right\rVert}
%\newcommand*{\scal}[1]{\left\langle #1 \right\rangle}
\newcommand*{\ciel}[1]{\left\lciel #1 \right\rciel}
\newcommand*{\floor}[1]{\left\lfloor #1 \right\rfloor}
%\newcommand*{\round}[1]{\left( #1 \right)}
%\newcommand*{\bracket}[1]{\left[ #1 \right]}
%\newcommand*{\curly}[1]{\left\{ #1 \right\}}
\newcommand*{\set}[2]{\left\{ #1 \middle| #2 \right\}}
\newcommand*{\icc}[2]{\left[ #1 , #2 \right]}
\newcommand*{\ico}[2]{\left[ #1 , #2 \right[}
\newcommand*{\ioc}[2]{\left] #1 , #2 \right]}
\newcommand*{\ioo}[2]{\left] #1 , #2 \right[}

\newcommand*\musteq{\mathrel{\overset{!}{=}}}

\mleftright

\char_gset_mathactive:Nn ( { \left\token_to_str:N ( }

\char_gset_mathactive:Nn ) { \right\token_to_str:N ) }

\char_gset_mathactive:Nn [ { \left\token_to_str:N [ }

\char_gset_mathactive:Nn ] { \right\token_to_str:N ] }

\char_gset_mathactive:Nn < {
	\exp_not:N \peek_charcode_remove:NTF < { \ll } {
		\exp_not:N \peek_charcode_remove:NTF = { \leq } {
			\group_begin:
				\char_set_mathcode:nn { `< } { \char_value_mathcode:n { `< } }
				\exp_not:n { \relax \mathrel{ \token_to_str:N < } \relax }
			\group_end:
		}
	}
}

\char_gset_mathactive:Nn > {
	\exp_not:N \peek_charcode_remove:NTF > { \gg } {
		\exp_not:N \peek_charcode_remove:NTF = { \geq } {
			\group_begin:
				\char_set_mathcode:nn { `> } { \char_value_mathcode:n { `> } }
				\exp_not:n { \relax \mathrel{ \token_to_str:N > } \relax }
			\group_end:
		}
	}
}

\char_gset_mathactive:Nn ! {
	\exp_not:N \peek_charcode_remove:NTF = { \exp_not:N \musteq } {
		\group_begin:
			\char_set_mathcode:nn { `! } { \char_value_mathcode:n { `! } }
			\token_to_str:N !
		\group_end:
	}
}

\char_gset_mathactive:Nn : {
	\exp_not:N \peek_charcode_remove:NTF = { \exp_not:N \coloneq } {
		\group_begin:
			\char_set_mathcode:nn { `: } { \char_value_mathcode:n { `: } }
			\token_to_str:N :
		\group_end:
	}
}

\DeclareDocumentCommand{\{}{}{
	\mode_if_math:TF {
		\left\lbrace
	}{
		\textbraceleft
	}
}

\DeclareDocumentCommand{\}}{}{
	\mode_if_math:TF {
		\right\rbrace
	}{
		\textbraceright
	}
}

\DeclareDocumentCommand{\<}{}{
	\mode_if_math:TF {
		\left\langle
	}{
		< % preferably \textlangle
	}
}

\DeclareDocumentCommand{\>}{}{
	\mode_if_math:TF {
		\right\rangle
	}{
		> % preferably \textrangle
	}
}


%\ExplSyntaxOff

%\DeclareMathOperator{\Res}{Res}
\DeclareMathOperator{\Resf}{Res*}
\DeclareMathOperator{\Prim}{Prim}
\DeclareMathOperator{\ggt}{ggT}
\DeclareMathOperator{\kgv}{kgV}
\DeclareMathOperator{\sgn}{sgn}
\DeclareMathOperator{\graph}{graph}
\DeclareMathOperator{\dom}{dom}
\DeclareMathOperator{\range}{range}
\DeclareMathOperator{\image}{image}
\DeclareMathOperator{\arsinh}{arsinh}
\DeclareMathOperator{\arcosh}{arcosh}
\DeclareMathOperator{\artanh}{artanh}
%\DeclareMathOperator{\grad}{grad}
\DeclareMathOperator{\ord}{ord}
%\DeclareMathOperator{\dd}{d\!}
\DeclareMathOperator{\Kern}{Kern}
\DeclareMathOperator{\Bild}{Bild}
%\DeclareMathOperator{\ch}{ch} %breaks chemformula
\DeclareMathOperator{\Log}{Log}
\DeclareMathOperator{\rang}{rang}
\DeclareMathOperator*{\res}{res}
\DeclareMathOperator{\rot}{rot}

%\let\olddiv\div
%\renewcommand*{\div}{\operatorname{div}}

%\newcommand*\corresponds{\mathrel{\hat{=}}}
\char_set_catcode_letter:N @
\newcommand*\Dashv{\mathrel{\mathpalette\m@thr@fl@ct{\mathord\vDash}}}
\newcommand*\m@thr@fl@ct[2]{\reflectbox{$\m@th#1#2$}}
\char_set_catcode_other:N @

\endinput
